# perceptron algorithm for P = 2 features in R PZrogramming
# if you want to add more features, add more weights after line 47

Xinput = input data
y_binary = outcomes of input data in binary
MAX_ITER = MAX amount of times algorithm will run
w = w vector (weights for each input)


1. initialize w vector filled with NA's. should have length p + 1 (p = amount of features)
2. add a coulumn to input data with all ones (bias vector)
3. for each iteration (MAX_ITER = 1000)
    for each row in the training data (Xinput)
        a. extract appended traing data
        b. calculate Yhat_i (predicted outcome of training data from perceptron algorithm)
        c. save the outcom in array
        d. update weights based on comparison between yhat_i and y_i
            w[1] = w[1] + (y_i - yhat_i) * x_i[1] (1 example)
        e. return weights vector


Pereceptron_training = function(Xinput, y_binary, MAX_ITER = 1000, w = NULL){
    
    observations = nrow(Xinput)
    p_star = ncol((Xinput))
    
    if(is.null(w)){
        w = rep(0, p_star + 1)
    }
    else if(!is.null(w)){
        w
    }
    else {
        stop("illegal arg")
    }
    
    Xinput_append = cbind(1, Xinput)
    
    for (iter in 1:MAX_ITER) {
        for (i in 1:observations) {
            
            x_i = Xinput_append[i, ]
            yhat_i = ifelse(sum(x_i * w) > 0, 1, 0)
            
            y_i = y_binary[i]
            
            for (j in 1:length(w)) {
+                 w[j] = w[j] + (y_i - yhat_i) * x_i[j]
+             }
        }
    }
    
    
    print(w)
    
}

